<div class="collection-container">
  {% if collection.handle == 'male' %}
    <h2 class="collection-dynamic-title">Men's Shoes</h2>
  {% elsif collection.handle == 'female' %}
    <h2 class="collection-dynamic-title">Women's Shoes</h2>
  {% elsif collection.handle == 'kids' %}
    <h2 class="collection-dynamic-title">Kids' Shoes</h2>
  {% else %}
    <h2 class="collection-dynamic-title">{{ collection.title }}</h2>
  {% endif %}
  <div class="collection-products-grid">
    {% for product in collection.products %}
      <div class="collection-product-card">
        <a href="{{ product.url }}" class="collection-product-link">
          {% if product.featured_image %}
            <img src="{{ product.featured_image | img_url: '400x' }}" alt="{{ product.title }}" class="collection-product-img" loading="lazy">
          {% endif %}
          <div class="collection-product-info">
            <div class="collection-product-title">{{ product.title }}</div>
            <div class="collection-product-price">{{ product.price | money }}</div>
          </div>
        </a>
        <button class="collection-add-to-cart-btn" onclick="addCollectionToCart({{ product.selected_or_first_available_variant.id }}, this)">Add to Cart</button>
      </div>
    {% endfor %}
    {% if collection.products.size == 0 %}
      <div class="collection-empty">{{ 'products.collection_template.empty' | t }}</div>
    {% endif %}
  </div>
</div>

{{ 'product.css' | asset_url | stylesheet_tag }}

<style>
.collection-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2px 4px;
}
.collection-dynamic-title {
  text-align: center;
  font-size: 2rem;
  font-weight: 700;
  margin: 18px 0 24px 0;
  letter-spacing: 1px;
  color: #222;
}
.collection-products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 32px;
}
.collection-product-card {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.04);
  overflow: hidden;
  transition: box-shadow 0.2s;
}
.collection-product-card:hover {
  box-shadow: 0 4px 16px rgba(0,0,0,0.10);
}
.collection-product-link {
  display: block;
  text-decoration: none;
  color: inherit;
}
.collection-product-img {
  width: 100%;
  height: 220px;
  object-fit: contain;
  background: #f7f7f7;
}
.collection-product-info {
  padding: 16px;
  text-align: center;
}
.collection-product-title {
  font-size: 1.1rem;
  font-weight: bold;
  margin-bottom: 8px;
}
.collection-product-price {
  font-size: 1.1rem;
  color: #111;
  font-weight: bold;
}
.collection-empty {
  grid-column: 1 / -1;
  text-align: center;
  color: #888;
  font-size: 1.2rem;
  margin-top: 32px;
}
</style>

{% schema %}
{
  "name": "Main Collection",
  "settings": []
}
{% endschema %} 

<script>
async function addCollectionToCart(variantId, btn) {
  btn.disabled = true;
  btn.textContent = 'Adding...';
  
  // Add visual feedback
  btn.style.transform = 'scale(0.95)';
  btn.style.background = '#f8f9fa';
  
  try {
    const response = await fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: variantId, quantity: 1 })
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.description || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    const result = await response.json();
    
    // Success animation
    btn.textContent = 'Added!';
    btn.style.background = '#1976d2';
    btn.style.color = '#fff';
    btn.style.transform = 'scale(1.05)';
    
    // Update cart count with animation
    await updateCartCount();
    
    // Open cart drawer after a small delay
    setTimeout(() => {
      const cartDrawerOpen = document.getElementById('cart-drawer-open');
      if (cartDrawerOpen) cartDrawerOpen.click();
    }, 200);
    
    // Reset button after delay
    setTimeout(() => {
      btn.textContent = 'Add to Cart';
      btn.disabled = false;
      btn.style.background = '';
      btn.style.color = '';
      btn.style.transform = '';
    }, 2000);
  } catch (error) {
    console.error('Add to cart error:', error);
    
    // Error animation
    btn.textContent = 'Error';
    btn.style.background = '#e74c3c';
    btn.style.color = '#fff';
    btn.style.transform = 'scale(0.95)';
    
    setTimeout(() => {
      btn.textContent = 'Add to Cart';
      btn.disabled = false;
      btn.style.background = '';
      btn.style.color = '';
      btn.style.transform = '';
    }, 2000);
  }
}

async function updateCartCount() {
  try {
    const response = await fetch('/cart.js');
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const cart = await response.json();
    const cartBadge = document.getElementById('cart-count-badge');
    
    if (cartBadge) {
      if (cart.item_count > 0) {
        cartBadge.textContent = cart.item_count;
        cartBadge.style.display = 'block';
        
        // Add bounce animation
        cartBadge.style.transform = 'scale(1.3)';
        setTimeout(() => {
          cartBadge.style.transform = 'scale(1)';
        }, 200);
      } else {
        cartBadge.style.display = 'none';
      }
    }
  } catch (error) {
    console.error('Failed to update cart count:', error);
  }
}

// Add hover animations to product cards
document.addEventListener('DOMContentLoaded', function() {
  const productCards = document.querySelectorAll('.collection-product-card');
  
  productCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-8px)';
      this.style.boxShadow = '0 12px 30px rgba(0, 0, 0, 0.2)';
    });
    
    card.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
      this.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.04)';
    });
  });
});
</script> 