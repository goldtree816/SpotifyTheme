{% comment %}
  Product template for individual product pages.
  Uses the main layout, header, and footer for consistency.
  Professional, systematic structure.
{% endcomment %}

<link rel="stylesheet" href="{{ 'product.css' | asset_url }}">

<main class="product-main">
  <div class="product-container">
    <div class="product-gallery">
      {% assign main_image = product.featured_image | default: product.images.first %}
      <div class="product-image-container">
        <img id="main-product-image" src="{{ main_image | img_url: '800x800' }}" alt="{{ product.title | escape }}" class="product-image" />
      </div>
      {% if product.images.size > 1 %}
        <div class="product-gallery-thumbnails thumbnails-below">
          {% for image in product.images %}
            <img src="{{ image | img_url: '60x60' }}" alt="{{ product.title | escape }} thumbnail" class="product-thumbnail" onclick="document.getElementById('main-product-image').src='{{ image | img_url: '400x400' }}'" />
          {% endfor %}
        </div>
      {% endif %}
    </div>
    <div class="product-details">
      <div class="product-title-row">
        <h1 class="product-title" style="font-weight:500;">{{ product.title }}</h1>
        <button class="wishlist-heart-btn" data-handle="{{ product.handle }}" aria-label="Add to Wishlist" title="Add to Wishlist">
          <span class="wishlist-heart-icon">&#9825;</span>
        </button>
      </div>
      <div class="product-category">Category: {{ product.type }}</div>
      <div class="product-price">
        {% if product.compare_at_price > product.price %}
          <span class="compare-at-price" style="text-decoration:line-through;color:#b0b0b0;margin-right:0.5em;">{{ product.compare_at_price | money }}</span>
        {% endif %}
        <span class="actual-price">{{ product.price | money }}</span>
      </div>
      <form action="/cart/add" method="post" enctype="multipart/form-data" class="product-form">
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        {% for option in product.options_with_values %}
          <div class="product-option">
            <div class="option-label">{{ option.name }}</div>
            <div class="option-buttons">
              {% for value in option.values %}
                <label class="option-btn-label">
                  <input type="radio" name="options[{{ option.name }}]" value="{{ value }}" {% if forloop.first %}checked{% endif %} class="option-btn-input" />
                  <span class="option-btn">{{ value }}</span>
                </label>
              {% endfor %}
            </div>
          </div>
        {% endfor %}
        <button type="submit" class="product-add-to-cart">Add to Cart</button>
      </form>
      <div class="product-description">{{ product.description }}</div>
    </div>
  </div>
  {% if product.collections.size > 0 %}
    <div class="similar-products">
      <h2>Similar Products</h2>
      <div class="similar-products-grid">
        {% assign similar_collection = product.collections.first %}
        {% for similar_product in similar_collection.products %}
          {% if similar_product.id != product.id %}
            <div class="similar-product-card">
              <a href="{{ similar_product.url }}">
                {% if similar_product.featured_image %}
                  <img src="{{ similar_product.featured_image | img_url: '300x300' }}" alt="{{ similar_product.title | escape }}" class="similar-product-image" />
                {% endif %}
                <div class="similar-product-title">{{ similar_product.title }}</div>
                <div class="similar-product-price">{{ similar_product.price | money }}</div>
              </a>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  {% endif %}
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const imageContainer = document.querySelector('.product-image-container');
  const productImage = document.getElementById('main-product-image');
  
  if (!imageContainer || !productImage) return;
  
  let isZoomed = false;
  const zoomLevel = 2.5; // How much to zoom in
  
  imageContainer.addEventListener('mouseenter', function() {
    isZoomed = true;
    imageContainer.style.cursor = 'zoom-out';
  });
  
  imageContainer.addEventListener('mouseleave', function() {
    isZoomed = false;
    productImage.style.transform = 'scale(1)';
    imageContainer.style.cursor = 'zoom-in';
  });
  
  imageContainer.addEventListener('mousemove', function(e) {
    if (!isZoomed) return;
    
    const rect = imageContainer.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Calculate percentage position within the container
    const xPercent = (x / rect.width) * 100;
    const yPercent = (y / rect.height) * 100;
    
    // Apply zoom with cursor-based origin
    productImage.style.transform = `scale(${zoomLevel})`;
    productImage.style.transformOrigin = `${xPercent}% ${yPercent}%`;
  });
  
  // Handle thumbnail clicks to reset zoom
  const thumbnails = document.querySelectorAll('.product-thumbnail');
  thumbnails.forEach(thumbnail => {
    thumbnail.addEventListener('click', function() {
      // Reset zoom when changing images
      setTimeout(() => {
        productImage.style.transform = 'scale(1)';
        productImage.style.transformOrigin = 'center';
      }, 100);
    });
  });
});
</script> 