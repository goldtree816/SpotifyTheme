{{ 'customer-addresses.css' | asset_url | stylesheet_tag }}
<script src="{{ 'customer.js' | asset_url }}" defer></script>

{%- paginate customer.addresses by 5 -%}
  <div class="customer-addresses section-{{ section.id }}-padding" data-customer-addresses>
    <h1>Manage Addresses</h1>
    <a href="{{ routes.account_url }}" class="customer-addresses__back-link">
      ‚Üê Back to Account
    </a>

    <div class="success-message" id="successMessage"></div>

    <div class="customer-addresses__add-form-wrapper">
      <button type="button" class="customer-addresses__add-btn" id="addAddressBtn">
        Add New Address
      </button>
      <div class="customer-addresses__add-form" id="addAddressForm">
        <h2>Add New Address</h2>
        {%- form 'customer_address', customer.new_address -%}
          <div class="field">
            <label for="AddressFirstNameNew">First name</label>
            <input type="text" id="AddressFirstNameNew" name="address[first_name]" value="{{ form.first_name }}" autocomplete="given-name" required>
          </div>
          <div class="field">
            <label for="AddressLastNameNew">Last name</label>
            <input type="text" id="AddressLastNameNew" name="address[last_name]" value="{{ form.last_name }}" autocomplete="family-name" required>
          </div>
          <div class="field">
            <label for="AddressCompanyNew">Company</label>
            <input type="text" id="AddressCompanyNew" name="address[company]" value="{{ form.company }}" autocomplete="organization">
          </div>
          <div class="field">
            <label for="AddressAddress1New">Address line 1</label>
            <input type="text" id="AddressAddress1New" name="address[address1]" value="{{ form.address1 }}" autocomplete="address-line1" required>
          </div>
          <div class="field">
            <label for="AddressAddress2New">Address line 2</label>
            <input type="text" id="AddressAddress2New" name="address[address2]" value="{{ form.address2 }}" autocomplete="address-line2">
          </div>
          <div class="field">
            <label for="AddressCityNew">City</label>
            <input type="text" id="AddressCityNew" name="address[city]" value="{{ form.city }}" autocomplete="address-level2" required>
          </div>
          <div class="field">
            <label for="AddressCountryNew">Country</label>
            <div class="select">
              <select id="AddressCountryNew" name="address[country]" data-default="{{ form.country }}" autocomplete="country" required>
                {{ all_country_option_tags }}
              </select>
            </div>
          </div>
          <div id="AddressProvinceContainerNew" style="display: none">
            <label for="AddressProvinceNew">Province</label>
            <div class="select">
              <select id="AddressProvinceNew" name="address[province]" data-default="{{ form.province }}" autocomplete="address-level1"></select>
            </div>
          </div>
          <div class="field">
            <label for="AddressZipNew">ZIP / Postal code</label>
            <input type="text" id="AddressZipNew" name="address[zip]" value="{{ form.zip }}" autocapitalize="characters" autocomplete="postal-code" required>
          </div>
          <div class="field">
            <label for="AddressPhoneNew">Phone</label>
            <input type="tel" id="AddressPhoneNew" name="address[phone]" value="{{ form.phone }}" autocomplete="tel">
          </div>
          <div class="checkbox-field">
            {{ form.set_as_default_checkbox }}
            <label for="address_default_address_new">Set as default address</label>
          </div>
          <div class="customer-addresses__form-actions">
            <button type="submit">Add Address</button>
            <button type="reset">Cancel</button>
          </div>
        {%- endform -%}
      </div>
    </div>

    <ul class="customer-addresses__list" id="addressList">
      {%- for address in customer.addresses -%}
        <li class="customer-addresses__item" 
            data-address-id="{{ address.id }}"
            data-address='{
              "first_name": "{{ address.first_name | escape }}",
              "last_name": "{{ address.last_name | escape }}",
              "company": "{{ address.company | escape }}",
              "address1": "{{ address.address1 | escape }}",
              "address2": "{{ address.address2 | escape }}",
              "city": "{{ address.city | escape }}",
              "province": "{{ address.province | escape }}",
              "zip": "{{ address.zip | escape }}",
              "country": "{{ address.country | escape }}",
              "phone": "{{ address.phone | escape }}",
              "is_default": {% if address == customer.default_address %}true{% else %}false{% endif %}
            }'>
          {%- if address == customer.default_address -%}
            <div class="customer-addresses__default-label">Default</div>
          {%- endif -%}
          <div class="customer-addresses__address-content">{{ address | format_address }}</div>
          <div class="customer-addresses__item-actions">
            <button type="button" class="customer-addresses__edit-btn" onclick="openEditModal({{ address.id }})">Edit</button>
            <button type="button" class="customer-addresses__delete-btn" onclick="deleteAddress('{{ address.url }}')">Delete</button>
          </div>
        </li>
      {%- endfor -%}
    </ul>

    {%- if paginate.pages > 1 and paginate.parts.size > 0 -%}
      <nav class="customer-addresses__pagination" role="navigation" aria-label="Pagination">
        <ul>
          {%- if paginate.previous -%}
            <li><a href="{{ paginate.previous.url }}" aria-label="Previous page">&laquo;</a></li>
          {%- endif -%}
          {%- for part in paginate.parts -%}
            <li>
              {%- if part.is_link -%}
                <a href="{{ part.url }}" aria-label="Go to page {{ part.title }}">{{- part.title -}}</a>
              {%- elsif part.title == paginate.current_page -%}
                <span aria-current="page">{{- part.title -}}</span>
              {%- else -%}
                <span>{{ part.title }}</span>
              {%- endif -%}
            </li>
          {%- endfor -%}
          {%- if paginate.next -%}
            <li><a href="{{ paginate.next.url }}" aria-label="Next page">&raquo;</a></li>
          {%- endif -%}
        </ul>
      </nav>
    {%- endif -%}
  </div>
{%- endpaginate -%}

<!-- Edit Address Modal -->
<div class="modal" id="editModal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Edit Address</h2>
      <button class="close-btn" id="closeModal">&times;</button>
    </div>
    <div id="editFormContainer">
      <!-- Edit form will be dynamically inserted here -->
    </div>
  </div>
</div>

<script>
  // Show success message
  function showSuccessMessage(message) {
    const successMessage = document.getElementById('successMessage');
    if (successMessage) {
      successMessage.textContent = message;
      successMessage.classList.add('show');
      setTimeout(() => {
        successMessage.classList.remove('show');
      }, 3000);
    }
  }

  // Toggle add address form
  const addAddressBtn = document.getElementById('addAddressBtn');
  const addAddressForm = document.getElementById('addAddressForm');
  
  if (addAddressBtn && addAddressBtn) {
    addAddressBtn.addEventListener('click', () => {
      addAddressForm.classList.toggle('active');
      if (addAddressForm.classList.contains('active')) {
        addAddressBtn.textContent = 'Cancel';
      } else {
        addAddressBtn.textContent = 'Add New Address';
      }
    });
  }

  // Handle add new address form submission
  const newAddressForm = addAddressForm?.querySelector('form');
  if (newAddressForm) {
    newAddressForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      
      // Submit the form data
      fetch(this.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        if (response.ok) {
          showSuccessMessage('Address added successfully!');
          // Reset form and close
          this.reset();
          addAddressForm.classList.remove('active');
          addAddressBtn.textContent = 'Add New Address';
          // Reload the page to show new address
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          throw new Error('Add failed');
        }
      })
      .catch(error => {
        console.error('Error adding address:', error);
        showSuccessMessage('Error adding address. Please try again.');
      });
    });
  }

  // Modal functionality
  const editModal = document.getElementById('editModal');
  const closeModal = document.getElementById('closeModal');
  const editFormContainer = document.getElementById('editFormContainer');

  function openEditModal(addressId) {
    // Find the address item and get the JSON data
    const addressItem = document.querySelector(`[data-address-id="${addressId}"]`);
    if (!addressItem) {
      console.error('Address item not found');
      return;
    }
    
    // Parse the JSON data from the data attribute
    const addressData = JSON.parse(addressItem.getAttribute('data-address'));
    
    editFormContainer.innerHTML = `
      <form action="/account/addresses/${addressId}" method="post" id="editAddressForm">
        <input type="hidden" name="_method" value="put">
        <div class="field">
          <label for="editFirstName">First name</label>
          <input type="text" id="editFirstName" name="address[first_name]" value="${addressData.first_name || ''}" required>
        </div>
        <div class="field">
          <label for="editLastName">Last name</label>
          <input type="text" id="editLastName" name="address[last_name]" value="${addressData.last_name || ''}" required>
        </div>
        <div class="field">
          <label for="editCompany">Company</label>
          <input type="text" id="editCompany" name="address[company]" value="${addressData.company || ''}">
        </div>
        <div class="field">
          <label for="editAddress1">Address line 1</label>
          <input type="text" id="editAddress1" name="address[address1]" value="${addressData.address1 || ''}" required>
        </div>
        <div class="field">
          <label for="editAddress2">Address line 2</label>
          <input type="text" id="editAddress2" name="address[address2]" value="${addressData.address2 || ''}">
        </div>
        <div class="field">
          <label for="editCity">City</label>
          <input type="text" id="editCity" name="address[city]" value="${addressData.city || ''}" required>
        </div>
        <div class="field">
          <label for="editCountry">Country</label>
          <div class="select">
            <select id="editCountry" name="address[country]" required>
              <option value="">Select Country</option>
              <option value="US" ${addressData.country === 'United States' ? 'selected' : ''}>United States</option>
              <option value="CA" ${addressData.country === 'Canada' ? 'selected' : ''}>Canada</option>
              <option value="UK" ${addressData.country === 'United Kingdom' ? 'selected' : ''}>United Kingdom</option>
              <option value="AU" ${addressData.country === 'Australia' ? 'selected' : ''}>Australia</option>
              <option value="DE" ${addressData.country === 'Germany' ? 'selected' : ''}>Germany</option>
              <option value="FR" ${addressData.country === 'France' ? 'selected' : ''}>France</option>
              <option value="JP" ${addressData.country === 'Japan' ? 'selected' : ''}>Japan</option>
              <option value="IN" ${addressData.country === 'India' ? 'selected' : ''}>India</option>
            </select>
          </div>
        </div>
        <div class="field">
          <label for="editState">State/Province</label>
          <input type="text" id="editState" name="address[province]" value="${addressData.province || ''}">
        </div>
        <div class="field">
          <label for="editZip">ZIP / Postal code</label>
          <input type="text" id="editZip" name="address[zip]" value="${addressData.zip || ''}" required>
        </div>
        <div class="field">
          <label for="editPhone">Phone</label>
          <input type="tel" id="editPhone" name="address[phone]" value="${addressData.phone || ''}">
        </div>
        <div class="checkbox-field">
          <input type="checkbox" id="editDefaultAddress" name="address[default]" ${addressData.is_default ? 'checked' : ''}>
          <label for="editDefaultAddress">Set as default address</label>
        </div>
        <div class="customer-addresses__form-actions">
          <button type="submit">Update Address</button>
          <button type="button" onclick="closeEditModal()">Cancel</button>
        </div>
      </form>
    `;
    
    // Add form submission handler
    const editForm = document.getElementById('editAddressForm');
    if (editForm) {
      editForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        // Submit the form data
        fetch(this.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (response.ok) {
            showSuccessMessage('Address updated successfully!');
            closeEditModal();
            // Reload the page to show updated data
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            throw new Error('Update failed');
          }
        })
        .catch(error => {
          console.error('Error updating address:', error);
          showSuccessMessage('Error updating address. Please try again.');
        });
      });
    }
    
    editModal.classList.add('active');
  }

  function closeEditModal() {
    editModal.classList.remove('active');
    editFormContainer.innerHTML = '';
  }

  function deleteAddress(addressUrl) {
    if (confirm('Are you sure you want to delete this address?')) {
      // Create a form to submit the delete request
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = addressUrl;
      
      const methodInput = document.createElement('input');
      methodInput.type = 'hidden';
      methodInput.name = '_method';
      methodInput.value = 'delete';
      
      form.appendChild(methodInput);
      document.body.appendChild(form);
      
      // Submit the form
      fetch(form.action, {
        method: 'POST',
        body: new FormData(form),
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        if (response.ok) {
          showSuccessMessage('Address deleted successfully!');
          // Reload the page to show updated data
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          throw new Error('Delete failed');
        }
      })
      .catch(error => {
        console.error('Error deleting address:', error);
        showSuccessMessage('Error deleting address. Please try again.');
      })
      .finally(() => {
        document.body.removeChild(form);
      });
    }
  }

  // Event listeners
  if (closeModal) {
    closeModal.addEventListener('click', closeEditModal);
  }

  // Close modal when clicking outside
  if (editModal) {
    editModal.addEventListener('click', (e) => {
      if (e.target === editModal) {
        closeEditModal();
      }
    });
  }

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && editModal && editModal.classList.contains('active')) {
      closeEditModal();
    }
  });

  // Make functions global for onclick handlers
  window.openEditModal = openEditModal;
  window.deleteAddress = deleteAddress;
  window.closeEditModal = closeEditModal;
</script>

{% schema %}
{
  "name": "t:sections.main-addresses.name",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
